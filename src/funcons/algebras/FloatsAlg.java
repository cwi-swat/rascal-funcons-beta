// GeNeRaTeD fOr: ./Values/Primitive/Floats/Floats.cbs
package funcons.algebras;

public interface FloatsAlg<E> {
  E binary32_();
  E binary64_();
  E binary128_();
  E decimal64_();
  E decimal128_();
  E float__(E[] args);
  E quiet_not_a_number__(E[] args);
  E qnan__(E[] args);
  E signaling_not_a_number__(E[] args);
  E snan__(E[] args);
  E positive_infinity__(E[] args);
  E pos_inf__(E[] args);
  E negative_infinity__(E[] args);
  E neg_inf__(E[] args);
  E float_convert__(E[] args);
  E decimal_float__(E[] args);
  E float_equal__(E[] args);
  E float_is_less__(E[] args);
  E float_is_less_or_equal__(E[] args);
  E float_is_greater__(E[] args);
  E float_is_greater_or_equal__(E[] args);
  E float_negate__(E[] args);
  E float_absolute_value__(E[] args);
  E float_add__(E[] args);
  E float_subtract__(E[] args);
  E float_multiply__(E[] args);
  E float_multiply_add__(E[] args);
  E float_divide__(E[] args);
  E float_remainder__(E[] args);
  E float_sqrt__(E[] args);
  E float_integer_power__(E[] args);
  E float_float_power__(E[] args);
  E float_round_ties_to_even__(E[] args);
  E float_round_ties_to_infinity__(E[] args);
  E float_floor__(E[] args);
  E float_ceiling__(E[] args);
  E float_truncate__(E[] args);
  E float_pi__(E[] args);
  E float_e__(E[] args);
  E float_log__(E[] args);
  E float_log10__(E[] args);
  E float_exp__(E[] args);
  E float_sin__(E[] args);
  E float_cos__(E[] args);
  E float_tan__(E[] args);
  E float_asin__(E[] args);
  E float_acos__(E[] args);
  E float_atan__(E[] args);
  E float_sinh__(E[] args);
  E float_cosh__(E[] args);
  E float_tanh__(E[] args);
  E float_asinh__(E[] args);
  E float_acosh__(E[] args);
  E float_atanh__(E[] args);
  E float_atan2__(E[] args);
  E float_formats_();
  E floats__(E[] args);
}